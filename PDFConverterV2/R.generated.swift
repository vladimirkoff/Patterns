//
// This is a generated file, do not edit!
// Generated by R.swift, see https://github.com/mac-cain13/R.swift
//

import Foundation
import RswiftResources
import UIKit

private class BundleFinder {}
let R = _R(bundle: Bundle(for: BundleFinder.self))

struct _R {
  let bundle: Foundation.Bundle
  var string: string { .init(bundle: bundle, preferredLanguages: nil, locale: nil) }
  var color: color { .init(bundle: bundle) }
  var image: image { .init(bundle: bundle) }
  var info: info { .init(bundle: bundle) }
  var font: font { .init(bundle: bundle) }
  var file: file { .init(bundle: bundle) }
  var storyboard: storyboard { .init(bundle: bundle) }

  func string(bundle: Foundation.Bundle) -> string {
    .init(bundle: bundle, preferredLanguages: nil, locale: nil)
  }
  func string(locale: Foundation.Locale) -> string {
    .init(bundle: bundle, preferredLanguages: nil, locale: locale)
  }
  func string(preferredLanguages: [String], locale: Locale? = nil) -> string {
    .init(bundle: bundle, preferredLanguages: preferredLanguages, locale: locale)
  }
  func color(bundle: Foundation.Bundle) -> color {
    .init(bundle: bundle)
  }
  func image(bundle: Foundation.Bundle) -> image {
    .init(bundle: bundle)
  }
  func info(bundle: Foundation.Bundle) -> info {
    .init(bundle: bundle)
  }
  func font(bundle: Foundation.Bundle) -> font {
    .init(bundle: bundle)
  }
  func file(bundle: Foundation.Bundle) -> file {
    .init(bundle: bundle)
  }
  func storyboard(bundle: Foundation.Bundle) -> storyboard {
    .init(bundle: bundle)
  }
  func validate() throws {
    try self.font.validate()
    try self.storyboard.validate()
  }

  struct project {
    let developmentRegion = "en"
  }

  /// This `_R.string` struct is generated, and contains static references to 1 localization tables.
  struct string {
    let bundle: Foundation.Bundle
    let preferredLanguages: [String]?
    let locale: Locale?
    var localizable: localizable { .init(source: .init(bundle: bundle, tableName: "Localizable", preferredLanguages: preferredLanguages, locale: locale)) }

    func localizable(preferredLanguages: [String]) -> localizable {
      .init(source: .init(bundle: bundle, tableName: "Localizable", preferredLanguages: preferredLanguages, locale: locale))
    }


    /// This `_R.string.localizable` struct is generated, and contains static references to 59 localization keys.
    struct localizable {
      let source: RswiftResources.StringResource.Source

      /// Value: Yes
      ///
      /// Key: Alert.delete.button
      var alertDeleteButton: RswiftResources.StringResource { .init(key: "Alert.delete.button", tableName: "Localizable", source: source, developmentValue: nil, comment: nil) }

      /// Value: No
      ///
      /// Key: Alert.delete.selectedButton
      var alertDeleteSelectedButton: RswiftResources.StringResource { .init(key: "Alert.delete.selectedButton", tableName: "Localizable", source: source, developmentValue: nil, comment: nil) }

      /// Value: Are you sure you want to  delete the file?
      ///
      /// Key: Alert.delete.title
      var alertDeleteTitle: RswiftResources.StringResource { .init(key: "Alert.delete.title", tableName: "Localizable", source: source, developmentValue: nil, comment: nil) }

      /// Value: Preview
      ///
      /// Key: Alert.pdfPreview.buton
      var alertPdfPreviewButon: RswiftResources.StringResource { .init(key: "Alert.pdfPreview.buton", tableName: "Localizable", source: source, developmentValue: nil, comment: nil) }

      /// Value: Go to homescreen
      ///
      /// Key: Alert.pdfPreview.selectedButton
      var alertPdfPreviewSelectedButton: RswiftResources.StringResource { .init(key: "Alert.pdfPreview.selectedButton", tableName: "Localizable", source: source, developmentValue: nil, comment: nil) }

      /// Value: Your PDF is ready!
      ///
      /// Key: Alert.pdfPreview.title
      var alertPdfPreviewTitle: RswiftResources.StringResource { .init(key: "Alert.pdfPreview.title", tableName: "Localizable", source: source, developmentValue: nil, comment: nil) }

      /// Value: Convert your files to PDF
      ///
      /// Key: ApplicationScreen.subTitle
      var applicationScreenSubTitle: RswiftResources.StringResource { .init(key: "ApplicationScreen.subTitle", tableName: "Localizable", source: source, developmentValue: nil, comment: nil) }

      /// Value: PDF Converter
      ///
      /// Key: ApplicationScreen.title
      var applicationScreenTitle: RswiftResources.StringResource { .init(key: "ApplicationScreen.title", tableName: "Localizable", source: source, developmentValue: nil, comment: nil) }

      /// Value: Convert
      ///
      /// Key: Convert
      var convert: RswiftResources.StringResource { .init(key: "Convert", tableName: "Localizable", source: source, developmentValue: nil, comment: nil) }

      /// Value: Converting...
      ///
      /// Key: Converting
      var converting: RswiftResources.StringResource { .init(key: "Converting", tableName: "Localizable", source: source, developmentValue: nil, comment: nil) }

      /// Value: Cancel
      ///
      /// Key: ErrorAlert.cancel
      var errorAlertCancel: RswiftResources.StringResource { .init(key: "ErrorAlert.cancel", tableName: "Localizable", source: source, developmentValue: nil, comment: nil) }

      /// Value: Please try again if you would like to proceed further with all features.
      ///
      /// Key: ErrorAlert.purchaseSubtitle
      var errorAlertPurchaseSubtitle: RswiftResources.StringResource { .init(key: "ErrorAlert.purchaseSubtitle", tableName: "Localizable", source: source, developmentValue: nil, comment: nil) }

      /// Value: Please make sure that you have an active subscription within Apple ID you're using.
      ///
      /// Key: ErrorAlert.restoreSubtitle
      var errorAlertRestoreSubtitle: RswiftResources.StringResource { .init(key: "ErrorAlert.restoreSubtitle", tableName: "Localizable", source: source, developmentValue: nil, comment: nil) }

      /// Value: Something went wrong.
      ///
      /// Key: ErrorAlert.title
      var errorAlertTitle: RswiftResources.StringResource { .init(key: "ErrorAlert.title", tableName: "Localizable", source: source, developmentValue: nil, comment: nil) }

      /// Value: Try Again
      ///
      /// Key: ErrorAlert.tryAgain
      var errorAlertTryAgain: RswiftResources.StringResource { .init(key: "ErrorAlert.tryAgain", tableName: "Localizable", source: source, developmentValue: nil, comment: nil) }

      /// Value: File to PDF
      ///
      /// Key: FileToPDF.title
      var fileToPDFTitle: RswiftResources.StringResource { .init(key: "FileToPDF.title", tableName: "Localizable", source: source, developmentValue: nil, comment: nil) }

      /// Value: Delete
      ///
      /// Key: Menu.delete
      var menuDelete: RswiftResources.StringResource { .init(key: "Menu.delete", tableName: "Localizable", source: source, developmentValue: nil, comment: nil) }

      /// Value: Import from Files
      ///
      /// Key: Menu.files
      var menuFiles: RswiftResources.StringResource { .init(key: "Menu.files", tableName: "Localizable", source: source, developmentValue: nil, comment: nil) }

      /// Value: Import from Gallery
      ///
      /// Key: Menu.gallery
      var menuGallery: RswiftResources.StringResource { .init(key: "Menu.gallery", tableName: "Localizable", source: source, developmentValue: nil, comment: nil) }

      /// Value: Scanner
      ///
      /// Key: Menu.scanner
      var menuScanner: RswiftResources.StringResource { .init(key: "Menu.scanner", tableName: "Localizable", source: source, developmentValue: nil, comment: nil) }

      /// Value: Share
      ///
      /// Key: Menu.share
      var menuShare: RswiftResources.StringResource { .init(key: "Menu.share", tableName: "Localizable", source: source, developmentValue: nil, comment: nil) }

      /// Value: Continue
      ///
      /// Key: ObButton.title
      var obButtonTitle: RswiftResources.StringResource { .init(key: "ObButton.title", tableName: "Localizable", source: source, developmentValue: nil, comment: nil) }

      /// Value: Take your document digitization to the next level with this powerful PDF tool
      ///
      /// Key: Onboarding.first.subtitle
      var onboardingFirstSubtitle: RswiftResources.StringResource { .init(key: "Onboarding.first.subtitle", tableName: "Localizable", source: source, developmentValue: nil, comment: nil) }

      /// Value: Welcome to the PDF Converter!
      ///
      /// Key: Onboarding.first.title
      var onboardingFirstTitle: RswiftResources.StringResource { .init(key: "Onboarding.first.title", tableName: "Localizable", source: source, developmentValue: nil, comment: nil) }

      /// Value: Make converting digital documents easy with our app's conversion tool
      ///
      /// Key: Onboarding.second.subtitle
      var onboardingSecondSubtitle: RswiftResources.StringResource { .init(key: "Onboarding.second.subtitle", tableName: "Localizable", source: source, developmentValue: nil, comment: nil) }

      /// Value: Fast-track your time to digitize
      ///
      /// Key: Onboarding.second.title
      var onboardingSecondTitle: RswiftResources.StringResource { .init(key: "Onboarding.second.title", tableName: "Localizable", source: source, developmentValue: nil, comment: nil) }

      /// Value: Seamlessly convert your files into PDF with the help of this magical pocket tool
      ///
      /// Key: Onboarding.third.subtitle
      var onboardingThirdSubtitle: RswiftResources.StringResource { .init(key: "Onboarding.third.subtitle", tableName: "Localizable", source: source, developmentValue: nil, comment: nil) }

      /// Value: Customize files with application
      ///
      /// Key: Onboarding.third.title
      var onboardingThirdTitle: RswiftResources.StringResource { .init(key: "Onboarding.third.title", tableName: "Localizable", source: source, developmentValue: nil, comment: nil) }

      /// Value: Way for unlimited conversions to PDF and custom them for 
      ///
      /// Key: Paywall.subtitle
      var paywallSubtitle: RswiftResources.StringResource { .init(key: "Paywall.subtitle", tableName: "Localizable", source: source, developmentValue: nil, comment: nil) }

      /// Value: Streamline your work processes
      ///
      /// Key: Paywall.title
      var paywallTitle: RswiftResources.StringResource { .init(key: "Paywall.title", tableName: "Localizable", source: source, developmentValue: nil, comment: nil) }

      /// Value: Subscribe
      ///
      /// Key: PaywallButton.title
      var paywallButtonTitle: RswiftResources.StringResource { .init(key: "PaywallButton.title", tableName: "Localizable", source: source, developmentValue: nil, comment: nil) }

      /// Value: Photo to PDF
      ///
      /// Key: PhotoToPDF.title
      var photoToPDFTitle: RswiftResources.StringResource { .init(key: "PhotoToPDF.title", tableName: "Localizable", source: source, developmentValue: nil, comment: nil) }

      /// Value: Go to premium
      ///
      /// Key: PremiumScreen.title
      var premiumScreenTitle: RswiftResources.StringResource { .init(key: "PremiumScreen.title", tableName: "Localizable", source: source, developmentValue: nil, comment: nil) }

      /// Value: Privacy Policy
      ///
      /// Key: Privacy
      var privacy: RswiftResources.StringResource { .init(key: "Privacy", tableName: "Localizable", source: source, developmentValue: nil, comment: nil) }

      /// Value: 3-day trial / Total: $0
      ///
      /// Key: Product.default
      var productDefault: RswiftResources.StringResource { .init(key: "Product.default", tableName: "Localizable", source: source, developmentValue: nil, comment: nil) }

      /// Value: Restore
      ///
      /// Key: Restore
      var restore: RswiftResources.StringResource { .init(key: "Restore", tableName: "Localizable", source: source, developmentValue: nil, comment: nil) }

      /// Value: Scanner
      ///
      /// Key: ScannerScreen.title
      var scannerScreenTitle: RswiftResources.StringResource { .init(key: "ScannerScreen.title", tableName: "Localizable", source: source, developmentValue: nil, comment: nil) }

      /// Value: Feedback
      ///
      /// Key: SettingsScreen.feedback
      var settingsScreenFeedback: RswiftResources.StringResource { .init(key: "SettingsScreen.feedback", tableName: "Localizable", source: source, developmentValue: nil, comment: nil) }

      /// Value: Go to premium
      ///
      /// Key: SettingsScreen.goToPremium
      var settingsScreenGoToPremium: RswiftResources.StringResource { .init(key: "SettingsScreen.goToPremium", tableName: "Localizable", source: source, developmentValue: nil, comment: nil) }

      /// Value: Privacy Policy
      ///
      /// Key: SettingsScreen.privacyPolicy
      var settingsScreenPrivacyPolicy: RswiftResources.StringResource { .init(key: "SettingsScreen.privacyPolicy", tableName: "Localizable", source: source, developmentValue: nil, comment: nil) }

      /// Value: Rate us
      ///
      /// Key: SettingsScreen.rateUs
      var settingsScreenRateUs: RswiftResources.StringResource { .init(key: "SettingsScreen.rateUs", tableName: "Localizable", source: source, developmentValue: nil, comment: nil) }

      /// Value: Share
      ///
      /// Key: SettingsScreen.share
      var settingsScreenShare: RswiftResources.StringResource { .init(key: "SettingsScreen.share", tableName: "Localizable", source: source, developmentValue: nil, comment: nil) }

      /// Value: Terms of service
      ///
      /// Key: SettingsScreen.termsOfService
      var settingsScreenTermsOfService: RswiftResources.StringResource { .init(key: "SettingsScreen.termsOfService", tableName: "Localizable", source: source, developmentValue: nil, comment: nil) }

      /// Value: Settings
      ///
      /// Key: SettingsScreen.title
      var settingsScreenTitle: RswiftResources.StringResource { .init(key: "SettingsScreen.title", tableName: "Localizable", source: source, developmentValue: nil, comment: nil) }

      /// Value: Explore this app with a free period
      ///
      /// Key: SpecialOfferTitle
      var specialOfferTitle: RswiftResources.StringResource { .init(key: "SpecialOfferTitle", tableName: "Localizable", source: source, developmentValue: nil, comment: nil) }

      /// Value: Terms
      ///
      /// Key: Terms
      var terms: RswiftResources.StringResource { .init(key: "Terms", tableName: "Localizable", source: source, developmentValue: nil, comment: nil) }

      /// Value: Click on “+” if you want  to take another photo
      ///
      /// Key: TipLabel.text
      var tipLabelText: RswiftResources.StringResource { .init(key: "TipLabel.text", tableName: "Localizable", source: source, developmentValue: nil, comment: nil) }

      /// Value: Convert documents without borders after a 3-day trial and 
      ///
      /// Key: Trial.subtitle
      var trialSubtitle: RswiftResources.StringResource { .init(key: "Trial.subtitle", tableName: "Localizable", source: source, developmentValue: nil, comment: nil) }

      /// Value: Explore this app with a free period
      ///
      /// Key: Trial.title
      var trialTitle: RswiftResources.StringResource { .init(key: "Trial.title", tableName: "Localizable", source: source, developmentValue: nil, comment: nil) }

      /// Value: Subscribe
      ///
      /// Key: TrialButton.title
      var trialButtonTitle: RswiftResources.StringResource { .init(key: "TrialButton.title", tableName: "Localizable", source: source, developmentValue: nil, comment: nil) }

      /// Value: image
      ///
      /// Key: image
      var image: RswiftResources.StringResource { .init(key: "image", tableName: "Localizable", source: source, developmentValue: nil, comment: nil) }

      /// Value: Monthly
      ///
      /// Key: monthly
      var monthly: RswiftResources.StringResource { .init(key: "monthly", tableName: "Localizable", source: source, developmentValue: nil, comment: nil) }

      /// Value: per month
      ///
      /// Key: perMonth
      var perMonth: RswiftResources.StringResource { .init(key: "perMonth", tableName: "Localizable", source: source, developmentValue: nil, comment: nil) }

      /// Value: per week
      ///
      /// Key: perWeek
      var perWeek: RswiftResources.StringResource { .init(key: "perWeek", tableName: "Localizable", source: source, developmentValue: nil, comment: nil) }

      /// Value: per year
      ///
      /// Key: perYear
      var perYear: RswiftResources.StringResource { .init(key: "perYear", tableName: "Localizable", source: source, developmentValue: nil, comment: nil) }

      /// Value: scanner
      ///
      /// Key: scanner
      var scanner: RswiftResources.StringResource { .init(key: "scanner", tableName: "Localizable", source: source, developmentValue: nil, comment: nil) }

      /// Value: /week
      ///
      /// Key: week
      var week: RswiftResources.StringResource { .init(key: "week", tableName: "Localizable", source: source, developmentValue: nil, comment: nil) }

      /// Value: Weekly
      ///
      /// Key: weekly
      var weekly: RswiftResources.StringResource { .init(key: "weekly", tableName: "Localizable", source: source, developmentValue: nil, comment: nil) }

      /// Value: Yearly
      ///
      /// Key: yearly
      var yearly: RswiftResources.StringResource { .init(key: "yearly", tableName: "Localizable", source: source, developmentValue: nil, comment: nil) }
    }
  }

  /// This `_R.color` struct is generated, and contains static references to 1 colors, and 1 namespaces.
  struct color {
    let bundle: Foundation.Bundle

    /// Color `AccentColor`.
    var accentColor: RswiftResources.ColorResource { .init(name: "AccentColor", path: [], bundle: bundle) }
    var colors: colors { .init(bundle: bundle) }

    func colors(bundle: Foundation.Bundle) -> colors {
      .init(bundle: bundle)
    }


    /// This `_R.color.colors` struct is generated, and contains static references to 7 colorss.
    struct colors {
      let bundle: Foundation.Bundle

      /// Color `Colors/background`.
      var background: RswiftResources.ColorResource { .init(name: "Colors/background", path: ["Colors"], bundle: bundle) }

      /// Color `Colors/black`.
      var black: RswiftResources.ColorResource { .init(name: "Colors/black", path: ["Colors"], bundle: bundle) }

      /// Color `Colors/dot`.
      var dot: RswiftResources.ColorResource { .init(name: "Colors/dot", path: ["Colors"], bundle: bundle) }

      /// Color `Colors/grey`.
      var grey: RswiftResources.ColorResource { .init(name: "Colors/grey", path: ["Colors"], bundle: bundle) }

      /// Color `Colors/red`.
      var red: RswiftResources.ColorResource { .init(name: "Colors/red", path: ["Colors"], bundle: bundle) }

      /// Color `Colors/redPale`.
      var redPale: RswiftResources.ColorResource { .init(name: "Colors/redPale", path: ["Colors"], bundle: bundle) }

      /// Color `Colors/white`.
      var white: RswiftResources.ColorResource { .init(name: "Colors/white", path: ["Colors"], bundle: bundle) }
    }
  }

  /// This `_R.image` struct is generated, and contains static references to 0 images, and 1 namespaces.
  struct image {
    let bundle: Foundation.Bundle
    var images: images { .init(bundle: bundle) }

    func images(bundle: Foundation.Bundle) -> images {
      .init(bundle: bundle)
    }


    /// This `_R.image.images` struct is generated, and contains static references to 1 imagess, and 4 namespaces.
    struct images {
      let bundle: Foundation.Bundle

      /// Image `Images/icon`.
      var icon: RswiftResources.ImageResource { .init(name: "Images/icon", path: ["Images"], bundle: bundle, locale: nil, onDemandResourceTags: nil) }
      var application: application { .init(bundle: bundle) }
      var components: components { .init(bundle: bundle) }
      var rateUs: rateUs { .init(bundle: bundle) }
      var settings: settings { .init(bundle: bundle) }

      func application(bundle: Foundation.Bundle) -> application {
        .init(bundle: bundle)
      }
      func components(bundle: Foundation.Bundle) -> components {
        .init(bundle: bundle)
      }
      func rateUs(bundle: Foundation.Bundle) -> rateUs {
        .init(bundle: bundle)
      }
      func settings(bundle: Foundation.Bundle) -> settings {
        .init(bundle: bundle)
      }


      /// This `_R.image.images.application` struct is generated, and contains static references to 10 applications.
      struct application {
        let bundle: Foundation.Bundle

        /// Image `Images/Application/Save`.
        var save: RswiftResources.ImageResource { .init(name: "Images/Application/Save", path: ["Images", "Application"], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

        /// Image `Images/Application/Scanner`.
        var scanner: RswiftResources.ImageResource { .init(name: "Images/Application/Scanner", path: ["Images", "Application"], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

        /// Image `Images/Application/add`.
        var add: RswiftResources.ImageResource { .init(name: "Images/Application/add", path: ["Images", "Application"], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

        /// Image `Images/Application/delete`.
        var delete: RswiftResources.ImageResource { .init(name: "Images/Application/delete", path: ["Images", "Application"], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

        /// Image `Images/Application/error`.
        var error: RswiftResources.ImageResource { .init(name: "Images/Application/error", path: ["Images", "Application"], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

        /// Image `Images/Application/gallery`.
        var gallery: RswiftResources.ImageResource { .init(name: "Images/Application/gallery", path: ["Images", "Application"], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

        /// Image `Images/Application/imporFiles`.
        var imporFiles: RswiftResources.ImageResource { .init(name: "Images/Application/imporFiles", path: ["Images", "Application"], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

        /// Image `Images/Application/more`.
        var more: RswiftResources.ImageResource { .init(name: "Images/Application/more", path: ["Images", "Application"], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

        /// Image `Images/Application/pdf`.
        var pdf: RswiftResources.ImageResource { .init(name: "Images/Application/pdf", path: ["Images", "Application"], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

        /// Image `Images/Application/settings`.
        var settings: RswiftResources.ImageResource { .init(name: "Images/Application/settings", path: ["Images", "Application"], bundle: bundle, locale: nil, onDemandResourceTags: nil) }
      }

      /// This `_R.image.images.components` struct is generated, and contains static references to 6 componentss.
      struct components {
        let bundle: Foundation.Bundle

        /// Image `Images/Components/add`.
        var add: RswiftResources.ImageResource { .init(name: "Images/Components/add", path: ["Images", "Components"], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

        /// Image `Images/Components/arrowRight`.
        var arrowRight: RswiftResources.ImageResource { .init(name: "Images/Components/arrowRight", path: ["Images", "Components"], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

        /// Image `Images/Components/back`.
        var back: RswiftResources.ImageResource { .init(name: "Images/Components/back", path: ["Images", "Components"], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

        /// Image `Images/Components/bin`.
        var bin: RswiftResources.ImageResource { .init(name: "Images/Components/bin", path: ["Images", "Components"], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

        /// Image `Images/Components/plusSelected`.
        var plusSelected: RswiftResources.ImageResource { .init(name: "Images/Components/plusSelected", path: ["Images", "Components"], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

        /// Image `Images/Components/right`.
        var right: RswiftResources.ImageResource { .init(name: "Images/Components/right", path: ["Images", "Components"], bundle: bundle, locale: nil, onDemandResourceTags: nil) }
      }

      /// This `_R.image.images.rateUs` struct is generated, and contains static references to 2 rateUss.
      struct rateUs {
        let bundle: Foundation.Bundle

        /// Image `Images/RateUs/rate`.
        var rate: RswiftResources.ImageResource { .init(name: "Images/RateUs/rate", path: ["Images", "RateUs"], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

        /// Image `Images/RateUs/thankYou`.
        var thankYou: RswiftResources.ImageResource { .init(name: "Images/RateUs/thankYou", path: ["Images", "RateUs"], bundle: bundle, locale: nil, onDemandResourceTags: nil) }
      }

      /// This `_R.image.images.settings` struct is generated, and contains static references to 8 settingss.
      struct settings {
        let bundle: Foundation.Bundle

        /// Image `Images/Settings/chevronRight`.
        var chevronRight: RswiftResources.ImageResource { .init(name: "Images/Settings/chevronRight", path: ["Images", "Settings"], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

        /// Image `Images/Settings/feedback`.
        var feedback: RswiftResources.ImageResource { .init(name: "Images/Settings/feedback", path: ["Images", "Settings"], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

        /// Image `Images/Settings/premium`.
        var premium: RswiftResources.ImageResource { .init(name: "Images/Settings/premium", path: ["Images", "Settings"], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

        /// Image `Images/Settings/privacy`.
        var privacy: RswiftResources.ImageResource { .init(name: "Images/Settings/privacy", path: ["Images", "Settings"], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

        /// Image `Images/Settings/purchase`.
        var purchase: RswiftResources.ImageResource { .init(name: "Images/Settings/purchase", path: ["Images", "Settings"], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

        /// Image `Images/Settings/rate`.
        var rate: RswiftResources.ImageResource { .init(name: "Images/Settings/rate", path: ["Images", "Settings"], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

        /// Image `Images/Settings/share`.
        var share: RswiftResources.ImageResource { .init(name: "Images/Settings/share", path: ["Images", "Settings"], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

        /// Image `Images/Settings/terms`.
        var terms: RswiftResources.ImageResource { .init(name: "Images/Settings/terms", path: ["Images", "Settings"], bundle: bundle, locale: nil, onDemandResourceTags: nil) }
      }
    }
  }

  /// This `_R.info` struct is generated, and contains static references to 1 properties.
  struct info {
    let bundle: Foundation.Bundle
    var uiApplicationSceneManifest: uiApplicationSceneManifest { .init(bundle: bundle) }

    func uiApplicationSceneManifest(bundle: Foundation.Bundle) -> uiApplicationSceneManifest {
      .init(bundle: bundle)
    }

    struct uiApplicationSceneManifest {
      let bundle: Foundation.Bundle

      let uiApplicationSupportsMultipleScenes: Bool = false

      var _key: String { bundle.infoDictionaryString(path: ["UIApplicationSceneManifest"], key: "_key") ?? "UIApplicationSceneManifest" }
    }
  }

  /// This `_R.font` struct is generated, and contains static references to 8 fonts.
  struct font: Sequence {
    let bundle: Foundation.Bundle

    /// Font `Outfit-Black`.
    var outfitBlack: RswiftResources.FontResource { .init(name: "Outfit-Black", bundle: bundle, filename: "Outfit-Black.ttf") }

    /// Font `Outfit-Bold`.
    var outfitBold: RswiftResources.FontResource { .init(name: "Outfit-Bold", bundle: bundle, filename: "Outfit-Bold.ttf") }

    /// Font `Outfit-ExtraBold`.
    var outfitExtraBold: RswiftResources.FontResource { .init(name: "Outfit-ExtraBold", bundle: bundle, filename: "Outfit-ExtraBold.ttf") }

    /// Font `Outfit-ExtraLight`.
    var outfitExtraLight: RswiftResources.FontResource { .init(name: "Outfit-ExtraLight", bundle: bundle, filename: "Outfit-ExtraLight.ttf") }

    /// Font `Outfit-Light`.
    var outfitLight: RswiftResources.FontResource { .init(name: "Outfit-Light", bundle: bundle, filename: "Outfit-Light.ttf") }

    /// Font `Outfit-Medium`.
    var outfitMedium: RswiftResources.FontResource { .init(name: "Outfit-Medium", bundle: bundle, filename: "Outfit-Medium.ttf") }

    /// Font `Outfit-Regular`.
    var outfitRegular: RswiftResources.FontResource { .init(name: "Outfit-Regular", bundle: bundle, filename: "Outfit-Regular.ttf") }

    /// Font `Outfit-SemiBold`.
    var outfitSemiBold: RswiftResources.FontResource { .init(name: "Outfit-SemiBold", bundle: bundle, filename: "Outfit-SemiBold.ttf") }

    func makeIterator() -> IndexingIterator<[RswiftResources.FontResource]> {
      [outfitBlack, outfitBold, outfitExtraBold, outfitExtraLight, outfitLight, outfitMedium, outfitRegular, outfitSemiBold].makeIterator()
    }
    func validate() throws {
      for font in self {
        if !font.canBeLoaded() { throw RswiftResources.ValidationError("[R.swift] Font '\(font.name)' could not be loaded, is '\(font.filename)' added to the UIAppFonts array in this targets Info.plist?") }
      }
    }
  }

  /// This `_R.file` struct is generated, and contains static references to 10 resource files.
  struct file {
    let bundle: Foundation.Bundle

    /// Resource file `Outfit-Black.ttf`.
    var outfitBlackTtf: RswiftResources.FileResource { .init(name: "Outfit-Black", pathExtension: "ttf", bundle: bundle, locale: LocaleReference.none) }

    /// Resource file `Outfit-Bold.ttf`.
    var outfitBoldTtf: RswiftResources.FileResource { .init(name: "Outfit-Bold", pathExtension: "ttf", bundle: bundle, locale: LocaleReference.none) }

    /// Resource file `Outfit-ExtraBold.ttf`.
    var outfitExtraBoldTtf: RswiftResources.FileResource { .init(name: "Outfit-ExtraBold", pathExtension: "ttf", bundle: bundle, locale: LocaleReference.none) }

    /// Resource file `Outfit-ExtraLight.ttf`.
    var outfitExtraLightTtf: RswiftResources.FileResource { .init(name: "Outfit-ExtraLight", pathExtension: "ttf", bundle: bundle, locale: LocaleReference.none) }

    /// Resource file `Outfit-Light.ttf`.
    var outfitLightTtf: RswiftResources.FileResource { .init(name: "Outfit-Light", pathExtension: "ttf", bundle: bundle, locale: LocaleReference.none) }

    /// Resource file `Outfit-Medium.ttf`.
    var outfitMediumTtf: RswiftResources.FileResource { .init(name: "Outfit-Medium", pathExtension: "ttf", bundle: bundle, locale: LocaleReference.none) }

    /// Resource file `Outfit-Regular.ttf`.
    var outfitRegularTtf: RswiftResources.FileResource { .init(name: "Outfit-Regular", pathExtension: "ttf", bundle: bundle, locale: LocaleReference.none) }

    /// Resource file `Outfit-SemiBold.ttf`.
    var outfitSemiBoldTtf: RswiftResources.FileResource { .init(name: "Outfit-SemiBold", pathExtension: "ttf", bundle: bundle, locale: LocaleReference.none) }

    /// Resource file `Outfit-Thin.ttf`.
    var outfitThinTtf: RswiftResources.FileResource { .init(name: "Outfit-Thin", pathExtension: "ttf", bundle: bundle, locale: LocaleReference.none) }

    /// Resource file `Outfit-VariableFont_wght.ttf`.
    var outfitVariableFont_wghtTtf: RswiftResources.FileResource { .init(name: "Outfit-VariableFont_wght", pathExtension: "ttf", bundle: bundle, locale: LocaleReference.none) }
  }

  /// This `_R.storyboard` struct is generated, and contains static references to 1 storyboards.
  struct storyboard {
    let bundle: Foundation.Bundle
    var launchScreen: launchScreen { .init(bundle: bundle) }

    func launchScreen(bundle: Foundation.Bundle) -> launchScreen {
      .init(bundle: bundle)
    }
    func validate() throws {
      try self.launchScreen.validate()
    }


    /// Storyboard `LaunchScreen`.
    struct launchScreen: RswiftResources.StoryboardReference, RswiftResources.InitialControllerContainer {
      typealias InitialController = UIKit.UIViewController

      let bundle: Foundation.Bundle

      let name = "LaunchScreen"
      func validate() throws {
        if UIKit.UIImage(named: "Images/icon", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'Images/icon' is used in storyboard 'LaunchScreen', but couldn't be loaded.") }
        if UIKit.UIColor(named: "Colors/background", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'Colors/background' is used in storyboard 'LaunchScreen', but couldn't be loaded.") }
      }
    }
  }
}